from threading import Thread,Lock
import random
from time import sleep

class Bank:
    def __init__(self):
        super().__init__()
        self.balance=0
        self.lock=Lock()

    def deposit(self):
        for i in range(100):
            if self.balance>=500 and self.lock.locked():
                self.lock.release()
            many = random.randint(50, 500)
            self.balance+=many
            print(f"Пополнение: {many}. Баланс: {self.balance}")
            sleep(0.01)

    def take(self):
        for i in range(100):
            many_1 = random.randint(50, 500)
            print(f"Запрос на {many_1}")
            if many_1<=self.balance:
                self.balance-=many_1
                print(f"Снятие: {many_1}. Баланс: {self.balance}")
            else:
                print("Запрос отклонён, недостаточно средств")
                self.lock.acquire()
            sleep(0.01)


bk = Bank()

# Т.к. методы принимают self, в потоки нужно передать сам объект класса Bank
th1 = Thread(target=Bank.deposit, args=(bk,))
th2 = Thread(target=Bank.take, args=(bk,))

th1.start()
th2.start()
th1.join()
th2.join()

print(f'Итоговый баланс: {bk.balance}')
